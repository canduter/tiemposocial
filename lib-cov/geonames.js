/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['geonames.js']) {
  _$jscoverage['geonames.js'] = [];
  _$jscoverage['geonames.js'][1] = 0;
  _$jscoverage['geonames.js'][2] = 0;
  _$jscoverage['geonames.js'][3] = 0;
  _$jscoverage['geonames.js'][4] = 0;
  _$jscoverage['geonames.js'][7] = 0;
  _$jscoverage['geonames.js'][8] = 0;
  _$jscoverage['geonames.js'][9] = 0;
  _$jscoverage['geonames.js'][10] = 0;
  _$jscoverage['geonames.js'][13] = 0;
  _$jscoverage['geonames.js'][16] = 0;
  _$jscoverage['geonames.js'][18] = 0;
  _$jscoverage['geonames.js'][20] = 0;
  _$jscoverage['geonames.js'][21] = 0;
  _$jscoverage['geonames.js'][22] = 0;
  _$jscoverage['geonames.js'][23] = 0;
  _$jscoverage['geonames.js'][24] = 0;
  _$jscoverage['geonames.js'][27] = 0;
  _$jscoverage['geonames.js'][31] = 0;
  _$jscoverage['geonames.js'][33] = 0;
  _$jscoverage['geonames.js'][34] = 0;
  _$jscoverage['geonames.js'][35] = 0;
  _$jscoverage['geonames.js'][36] = 0;
  _$jscoverage['geonames.js'][40] = 0;
  _$jscoverage['geonames.js'][41] = 0;
  _$jscoverage['geonames.js'][42] = 0;
  _$jscoverage['geonames.js'][43] = 0;
  _$jscoverage['geonames.js'][45] = 0;
  _$jscoverage['geonames.js'][49] = 0;
  _$jscoverage['geonames.js'][50] = 0;
  _$jscoverage['geonames.js'][51] = 0;
  _$jscoverage['geonames.js'][52] = 0;
  _$jscoverage['geonames.js'][53] = 0;
  _$jscoverage['geonames.js'][54] = 0;
  _$jscoverage['geonames.js'][55] = 0;
  _$jscoverage['geonames.js'][56] = 0;
  _$jscoverage['geonames.js'][57] = 0;
  _$jscoverage['geonames.js'][58] = 0;
  _$jscoverage['geonames.js'][59] = 0;
  _$jscoverage['geonames.js'][63] = 0;
  _$jscoverage['geonames.js'][65] = 0;
  _$jscoverage['geonames.js'][74] = 0;
  _$jscoverage['geonames.js'][76] = 0;
  _$jscoverage['geonames.js'][77] = 0;
  _$jscoverage['geonames.js'][78] = 0;
  _$jscoverage['geonames.js'][79] = 0;
  _$jscoverage['geonames.js'][80] = 0;
  _$jscoverage['geonames.js'][81] = 0;
  _$jscoverage['geonames.js'][82] = 0;
  _$jscoverage['geonames.js'][83] = 0;
  _$jscoverage['geonames.js'][86] = 0;
  _$jscoverage['geonames.js'][88] = 0;
  _$jscoverage['geonames.js'][92] = 0;
  _$jscoverage['geonames.js'][97] = 0;
  _$jscoverage['geonames.js'][99] = 0;
  _$jscoverage['geonames.js'][100] = 0;
  _$jscoverage['geonames.js'][101] = 0;
  _$jscoverage['geonames.js'][102] = 0;
  _$jscoverage['geonames.js'][103] = 0;
  _$jscoverage['geonames.js'][104] = 0;
  _$jscoverage['geonames.js'][105] = 0;
  _$jscoverage['geonames.js'][106] = 0;
  _$jscoverage['geonames.js'][109] = 0;
  _$jscoverage['geonames.js'][112] = 0;
  _$jscoverage['geonames.js'][115] = 0;
  _$jscoverage['geonames.js'][121] = 0;
}
_$jscoverage['geonames.js'][1]++;
var EventEmitter = require("events").EventEmitter;
_$jscoverage['geonames.js'][2]++;
var http = require("http");
_$jscoverage['geonames.js'][3]++;
var Common = require("./common");
_$jscoverage['geonames.js'][4]++;
Tools = Common.tools;
_$jscoverage['geonames.js'][7]++;
var GeoNames = (function () {
  _$jscoverage['geonames.js'][8]++;
  EventEmitter.call(this);
  _$jscoverage['geonames.js'][9]++;
  this.receivePlaces = Tools.bind(this.receivePlaces, this);
  _$jscoverage['geonames.js'][10]++;
  this.receiveWeatherStations = Tools.bind(this.receiveWeatherStations, this);
});
_$jscoverage['geonames.js'][13]++;
GeoNames.prototype = Object.create(EventEmitter.prototype);
_$jscoverage['geonames.js'][16]++;
GeoNames.prototype.search = (function (placeName) {
  _$jscoverage['geonames.js'][18]++;
  if (placeName) {
    _$jscoverage['geonames.js'][20]++;
    var self = this;
    _$jscoverage['geonames.js'][21]++;
    var query = this.prepareSearchQuery(placeName);
    _$jscoverage['geonames.js'][22]++;
    var request = this.executeSearch(query);
    _$jscoverage['geonames.js'][23]++;
    request.on("response", this.receivePlaces);
    _$jscoverage['geonames.js'][24]++;
    request.end();
  }
  else {
    _$jscoverage['geonames.js'][27]++;
    this.emit("placeNotFound");
  }
});
_$jscoverage['geonames.js'][31]++;
GeoNames.prototype.searchWeatherStations = (function (latitude, longitude) {
  _$jscoverage['geonames.js'][33]++;
  var query = this.prepareWeatherStationSearchQuery(latitude, longitude);
  _$jscoverage['geonames.js'][34]++;
  var request = this.executeSearch(query);
  _$jscoverage['geonames.js'][35]++;
  request.on("response", this.receiveWeatherStations);
  _$jscoverage['geonames.js'][36]++;
  request.end();
});
_$jscoverage['geonames.js'][40]++;
GeoNames.prototype.prepareSearchQuery = (function (placeName) {
  _$jscoverage['geonames.js'][41]++;
  var baseUri = "/searchJSON?q=";
  _$jscoverage['geonames.js'][42]++;
  var options = "&featureClass=P&lang=es&maxRows=10&";
  _$jscoverage['geonames.js'][43]++;
  var username = "username=jramcast";
  _$jscoverage['geonames.js'][45]++;
  return baseUri + escape(placeName) + options + username;
});
_$jscoverage['geonames.js'][49]++;
GeoNames.prototype.prepareWeatherStationSearchQuery = (function (latitude, longitude) {
  _$jscoverage['geonames.js'][50]++;
  var latitude = parseFloat(latitude);
  _$jscoverage['geonames.js'][51]++;
  var longitude = parseFloat(longitude);
  _$jscoverage['geonames.js'][52]++;
  var north = latitude + 0.5;
  _$jscoverage['geonames.js'][53]++;
  var south = latitude - 0.5;
  _$jscoverage['geonames.js'][54]++;
  var east = longitude + 0.5;
  _$jscoverage['geonames.js'][55]++;
  var west = longitude - 0.5;
  _$jscoverage['geonames.js'][56]++;
  var baseUri = "/weatherJSON?";
  _$jscoverage['geonames.js'][57]++;
  var box = "north=" + north + "&south=" + south + "&east=" + east + "&west=" + west + "&";
  _$jscoverage['geonames.js'][58]++;
  var username = "username=jramcast";
  _$jscoverage['geonames.js'][59]++;
  return baseUri + box + username;
});
_$jscoverage['geonames.js'][63]++;
GeoNames.prototype.executeSearch = (function (query) {
  _$jscoverage['geonames.js'][65]++;
  return http.request({host: "api.geonames.org", port: 80, method: "GET", path: query});
});
_$jscoverage['geonames.js'][74]++;
GeoNames.prototype.receivePlaces = (function (response) {
  _$jscoverage['geonames.js'][76]++;
  var self = this;
  _$jscoverage['geonames.js'][77]++;
  var body = "";
  _$jscoverage['geonames.js'][78]++;
  response.on("data", (function (data) {
  _$jscoverage['geonames.js'][79]++;
  body += data;
  _$jscoverage['geonames.js'][80]++;
  try {
    _$jscoverage['geonames.js'][81]++;
    var places = JSON.parse(body);
    _$jscoverage['geonames.js'][82]++;
    if (places.totalResultsCount && places.totalResultsCount > 0) {
      _$jscoverage['geonames.js'][83]++;
      self.emit("placesFound", places.geonames);
    }
    else {
      _$jscoverage['geonames.js'][86]++;
      self.emit("placeNotFound");
    }
    _$jscoverage['geonames.js'][88]++;
    self.removeAllListeners("placesFound");
  }
  catch (ex) {
    _$jscoverage['geonames.js'][92]++;
    console.log("waiting for more data chunks...");
  }
}));
});
_$jscoverage['geonames.js'][97]++;
GeoNames.prototype.receiveWeatherStations = (function (response) {
  _$jscoverage['geonames.js'][99]++;
  var self = this;
  _$jscoverage['geonames.js'][100]++;
  var body = "";
  _$jscoverage['geonames.js'][101]++;
  response.on("data", (function (data) {
  _$jscoverage['geonames.js'][102]++;
  body += data;
  _$jscoverage['geonames.js'][103]++;
  try {
    _$jscoverage['geonames.js'][104]++;
    var stations = JSON.parse(body);
    _$jscoverage['geonames.js'][105]++;
    if (stations.weatherObservations.length > 0) {
      _$jscoverage['geonames.js'][106]++;
      self.emit("weatherStationsFound", stations.weatherObservations);
    }
    else {
      _$jscoverage['geonames.js'][109]++;
      self.emit("weatherStationsNotFound");
    }
    _$jscoverage['geonames.js'][112]++;
    self.removeAllListeners("weatherStationsFound");
  }
  catch (ex) {
    _$jscoverage['geonames.js'][115]++;
    console.log("waiting for more data chunks...");
  }
}));
});
_$jscoverage['geonames.js'][121]++;
module.exports = GeoNames;
_$jscoverage['geonames.js'].source = ["var  EventEmitter = require('events').EventEmitter;","var http = require(\"http\");","var Common = require('./common');","\tTools = Common.tools;","","","var GeoNames = function() {","  \tEventEmitter.call(this);","\tthis.receivePlaces = Tools.bind(this.receivePlaces, this);","\tthis.receiveWeatherStations = Tools.bind(this.receiveWeatherStations, this);","};","","GeoNames.prototype = Object.create(EventEmitter.prototype);","","","GeoNames.prototype.search = function(placeName) {","\t\t","\tif(placeName)","\t{\t","\t\tvar self = this;\t\t","\t\tvar query = this.prepareSearchQuery(placeName);\t\t","\t\tvar request =  this.executeSearch(query);","\t\trequest.on(\"response\", this.receivePlaces);","\t\trequest.end();","\t}\t","\telse ","\t\tthis.emit('placeNotFound');\t\t","};","","//http://api.geonames.org/weather?north=39.5&amp;south=38.5&amp;east=-1&amp;west=-2&amp;username=jramcast","GeoNames.prototype.searchWeatherStations = function(latitude, longitude) {","\t\t","\t\tvar query = this.prepareWeatherStationSearchQuery(latitude, longitude);\t","\t\tvar request =  this.executeSearch(query);\t\t","\t\trequest.on(\"response\", this.receiveWeatherStations);","\t\trequest.end();","","};","","GeoNames.prototype.prepareSearchQuery = function(placeName) {","\tvar baseUri = \"/searchJSON?q=\";","\tvar options = \"&amp;featureClass=P&amp;lang=es&amp;maxRows=10&amp;\"; //P significa pueblo o ciudad (sitio poblado)","\tvar username = \"username=jramcast\";","\t//Ejemplo:\thttp://api.geonames.org/search?q=albacete&amp;featureClass=P&amp;maxRows=4&amp;username=jramcast","\treturn baseUri + escape(placeName) + options + username;","}","","","GeoNames.prototype.prepareWeatherStationSearchQuery = function(latitude, longitude) {\t","\tvar latitude = parseFloat(latitude);","\tvar longitude = parseFloat(longitude);","\tvar north = latitude + 0.5;","\tvar south = latitude - 0.5;","\tvar east = longitude + 0.5;","\tvar west = longitude - 0.5;","\tvar baseUri = \"/weatherJSON?\";","\tvar box = \"north=\" + north + \"&amp;south=\" + south  + \"&amp;east=\" + east  + \"&amp;west=\" + west  + \"&amp;\";","\tvar username = \"username=jramcast\";\t","\treturn baseUri + box + username;","}","","","GeoNames.prototype.executeSearch = function(query)","{","\treturn http.request({","\t\thost: \"api.geonames.org\",","\t\tport: 80,","\t\tmethod: \"GET\",","\t\tpath: query","\t});","}","","","GeoNames.prototype.receivePlaces = function(response)","{","\tvar self = this;","\tvar body = \"\";","\tresponse.on(\"data\", function(data){\t\t","\t\tbody += data;\t\t","\t\ttry {","\t\t\tvar places = JSON.parse(body);\t","\t\t\tif (places.totalResultsCount &amp;&amp; places.totalResultsCount &gt; 0) {\t\t\t\t\t\t","\t\t\t\tself.emit(\"placesFound\", places.geonames);","\t\t\t}\t","\t\t\telse{ ","\t\t\t\tself.emit('placeNotFound');","\t\t\t}","\t\t\tself.removeAllListeners(\"placesFound\"); //esto?\t\t\t\t","\t\t\t","\t\t} ","\t\tcatch (ex) {","\t\t\tconsole.log(\"waiting for more data chunks...\");","\t\t}","\t});","}","","GeoNames.prototype.receiveWeatherStations = function(response)","{","\tvar self = this;","\tvar body = \"\";","\tresponse.on(\"data\", function(data){\t\t","\t\tbody += data;\t\t","\t\ttry {\t\t\t","\t\t\tvar stations = JSON.parse(body);\t\t\t","\t\t\tif (stations.weatherObservations.length &gt; 0) {","\t\t\t\tself.emit(\"weatherStationsFound\", stations.weatherObservations);\t\t\t\t","\t\t\t}","\t\t\telse {","\t\t\t\tself.emit(\"weatherStationsNotFound\");","\t\t\t}","\t\t\t\t\t\t","\t\t\tself.removeAllListeners(\"weatherStationsFound\"); //esto?","\t\t} ","\t\tcatch (ex) {","\t\t\tconsole.log(\"waiting for more data chunks...\");","\t\t}","\t});","}","","","module.exports = GeoNames;"];
