/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['socketsmanager.js']) {
  _$jscoverage['socketsmanager.js'] = [];
  _$jscoverage['socketsmanager.js'][1] = 0;
  _$jscoverage['socketsmanager.js'][9] = 0;
  _$jscoverage['socketsmanager.js'][10] = 0;
  _$jscoverage['socketsmanager.js'][11] = 0;
  _$jscoverage['socketsmanager.js'][12] = 0;
  _$jscoverage['socketsmanager.js'][13] = 0;
  _$jscoverage['socketsmanager.js'][14] = 0;
  _$jscoverage['socketsmanager.js'][19] = 0;
  _$jscoverage['socketsmanager.js'][20] = 0;
  _$jscoverage['socketsmanager.js'][21] = 0;
  _$jscoverage['socketsmanager.js'][22] = 0;
  _$jscoverage['socketsmanager.js'][26] = 0;
  _$jscoverage['socketsmanager.js'][28] = 0;
  _$jscoverage['socketsmanager.js'][29] = 0;
  _$jscoverage['socketsmanager.js'][30] = 0;
  _$jscoverage['socketsmanager.js'][31] = 0;
  _$jscoverage['socketsmanager.js'][35] = 0;
  _$jscoverage['socketsmanager.js'][36] = 0;
  _$jscoverage['socketsmanager.js'][37] = 0;
  _$jscoverage['socketsmanager.js'][42] = 0;
  _$jscoverage['socketsmanager.js'][43] = 0;
  _$jscoverage['socketsmanager.js'][44] = 0;
  _$jscoverage['socketsmanager.js'][45] = 0;
  _$jscoverage['socketsmanager.js'][46] = 0;
  _$jscoverage['socketsmanager.js'][50] = 0;
  _$jscoverage['socketsmanager.js'][51] = 0;
  _$jscoverage['socketsmanager.js'][52] = 0;
  _$jscoverage['socketsmanager.js'][54] = 0;
  _$jscoverage['socketsmanager.js'][58] = 0;
  _$jscoverage['socketsmanager.js'][61] = 0;
  _$jscoverage['socketsmanager.js'][62] = 0;
  _$jscoverage['socketsmanager.js'][71] = 0;
  _$jscoverage['socketsmanager.js'][72] = 0;
  _$jscoverage['socketsmanager.js'][73] = 0;
  _$jscoverage['socketsmanager.js'][74] = 0;
  _$jscoverage['socketsmanager.js'][75] = 0;
  _$jscoverage['socketsmanager.js'][78] = 0;
  _$jscoverage['socketsmanager.js'][85] = 0;
  _$jscoverage['socketsmanager.js'][86] = 0;
  _$jscoverage['socketsmanager.js'][88] = 0;
  _$jscoverage['socketsmanager.js'][90] = 0;
  _$jscoverage['socketsmanager.js'][93] = 0;
  _$jscoverage['socketsmanager.js'][94] = 0;
  _$jscoverage['socketsmanager.js'][95] = 0;
  _$jscoverage['socketsmanager.js'][96] = 0;
  _$jscoverage['socketsmanager.js'][97] = 0;
  _$jscoverage['socketsmanager.js'][98] = 0;
  _$jscoverage['socketsmanager.js'][103] = 0;
  _$jscoverage['socketsmanager.js'][107] = 0;
  _$jscoverage['socketsmanager.js'][111] = 0;
  _$jscoverage['socketsmanager.js'][118] = 0;
  _$jscoverage['socketsmanager.js'][119] = 0;
  _$jscoverage['socketsmanager.js'][120] = 0;
  _$jscoverage['socketsmanager.js'][122] = 0;
  _$jscoverage['socketsmanager.js'][123] = 0;
  _$jscoverage['socketsmanager.js'][125] = 0;
  _$jscoverage['socketsmanager.js'][126] = 0;
  _$jscoverage['socketsmanager.js'][130] = 0;
  _$jscoverage['socketsmanager.js'][132] = 0;
  _$jscoverage['socketsmanager.js'][133] = 0;
  _$jscoverage['socketsmanager.js'][135] = 0;
  _$jscoverage['socketsmanager.js'][136] = 0;
  _$jscoverage['socketsmanager.js'][138] = 0;
  _$jscoverage['socketsmanager.js'][141] = 0;
  _$jscoverage['socketsmanager.js'][142] = 0;
  _$jscoverage['socketsmanager.js'][146] = 0;
  _$jscoverage['socketsmanager.js'][147] = 0;
  _$jscoverage['socketsmanager.js'][148] = 0;
}
_$jscoverage['socketsmanager.js'][1]++;
var GeoNames = require("./geonames"), TwitterFeeder = require("./twitterfeeder"), TwitterSearcher = require("./twittersearcher"), Common = require("./common"), Tools = Common.tools;
_$jscoverage['socketsmanager.js'][9]++;
var SocketsManager = (function (app) {
  _$jscoverage['socketsmanager.js'][10]++;
  this.app = app;
  _$jscoverage['socketsmanager.js'][11]++;
  this.io = require("socket.io").listen(app);
  _$jscoverage['socketsmanager.js'][12]++;
  var onConnection = Tools.bind(this.onConnection, this);
  _$jscoverage['socketsmanager.js'][13]++;
  this.io.sockets.on("connection", onConnection);
  _$jscoverage['socketsmanager.js'][14]++;
  this.clients = {};
});
_$jscoverage['socketsmanager.js'][19]++;
SocketsManager.prototype.onConnection = (function (socket) {
  _$jscoverage['socketsmanager.js'][20]++;
  var self = this;
  _$jscoverage['socketsmanager.js'][21]++;
  socket.on("place", (function (place) {
  _$jscoverage['socketsmanager.js'][22]++;
  self.checkPlace(place.name, socket);
}));
  _$jscoverage['socketsmanager.js'][26]++;
  socket.on("want_another_place", (function (whichPlace) {
  _$jscoverage['socketsmanager.js'][28]++;
  var placeIndex = whichPlace.placeIndex;
  _$jscoverage['socketsmanager.js'][29]++;
  socket.get("placeResults", (function (err, places) {
  _$jscoverage['socketsmanager.js'][30]++;
  if (err) {
    _$jscoverage['socketsmanager.js'][31]++;
    console.log("Error retreiving places from socket ", name);
  }
  _$jscoverage['socketsmanager.js'][35]++;
  var feeder = self.clients[socket.id];
  _$jscoverage['socketsmanager.js'][36]++;
  if (feeder) {
    _$jscoverage['socketsmanager.js'][37]++;
    feeder.endStream();
  }
  _$jscoverage['socketsmanager.js'][42]++;
  var reorderedResults = [];
  _$jscoverage['socketsmanager.js'][43]++;
  reorderedResults[0] = places[placeIndex];
  _$jscoverage['socketsmanager.js'][44]++;
  for (var i in places) {
    _$jscoverage['socketsmanager.js'][45]++;
    if (i != placeIndex) {
      _$jscoverage['socketsmanager.js'][46]++;
      reorderedResults.push(places[i]);
    }
}
  _$jscoverage['socketsmanager.js'][50]++;
  socket.emit("placeCheckedInGeoNames", reorderedResults);
  _$jscoverage['socketsmanager.js'][51]++;
  var mainResult = reorderedResults[0];
  _$jscoverage['socketsmanager.js'][52]++;
  new GeoNames().on("weatherStationsFound", (function (stations) {
  _$jscoverage['socketsmanager.js'][54]++;
  socket.emit("weatherStationsFound", stations);
})).on("weatherStationsNotFound", (function () {
  _$jscoverage['socketsmanager.js'][58]++;
  socket.emit("weatherStationsNotFound");
})).searchWeatherStations(mainResult.lat, mainResult.lng);
  _$jscoverage['socketsmanager.js'][61]++;
  self.searchTwitter(mainResult.name, socket, mainResult.lat, mainResult.lng);
  _$jscoverage['socketsmanager.js'][62]++;
  self.startTwitterStream(mainResult.name, socket, mainResult.lat, mainResult.lng);
}));
}));
  _$jscoverage['socketsmanager.js'][71]++;
  socket.on("disconnect", (function () {
  _$jscoverage['socketsmanager.js'][72]++;
  console.log("client disconnecting : " + socket.id);
  _$jscoverage['socketsmanager.js'][73]++;
  var feeder = self.clients[socket.id];
  _$jscoverage['socketsmanager.js'][74]++;
  if (feeder) {
    _$jscoverage['socketsmanager.js'][75]++;
    feeder.endStream();
  }
  else {
    _$jscoverage['socketsmanager.js'][78]++;
    console.log("could not remove feeder listener from client " + socket.id);
  }
}));
});
_$jscoverage['socketsmanager.js'][85]++;
SocketsManager.prototype.checkPlace = (function (placeName, socket) {
  _$jscoverage['socketsmanager.js'][86]++;
  var geoNames = new GeoNames();
  _$jscoverage['socketsmanager.js'][88]++;
  var self = this;
  _$jscoverage['socketsmanager.js'][90]++;
  geoNames.on("placesFound", (function (places) {
  _$jscoverage['socketsmanager.js'][93]++;
  socket.set("placeResults", places);
  _$jscoverage['socketsmanager.js'][94]++;
  socket.emit("placeCheckedInGeoNames", places);
  _$jscoverage['socketsmanager.js'][95]++;
  var mainResult = places[0];
  _$jscoverage['socketsmanager.js'][96]++;
  geoNames.searchWeatherStations(mainResult.lat, mainResult.lng);
  _$jscoverage['socketsmanager.js'][97]++;
  self.searchTwitter(mainResult.name, socket, mainResult.lat, mainResult.lng);
  _$jscoverage['socketsmanager.js'][98]++;
  self.startTwitterStream(mainResult.name, socket, mainResult.lat, mainResult.lng);
})).on("placeNotFound", (function () {
  _$jscoverage['socketsmanager.js'][103]++;
  socket.emit("placeNotFoundInGeoNames");
})).on("weatherStationsFound", (function (stations) {
  _$jscoverage['socketsmanager.js'][107]++;
  socket.emit("weatherStationsFound", stations);
})).on("weatherStationsNotFound", (function () {
  _$jscoverage['socketsmanager.js'][111]++;
  socket.emit("weatherStationsNotFound");
})).search(placeName);
});
_$jscoverage['socketsmanager.js'][118]++;
SocketsManager.prototype.searchTwitter = (function (placeName, socket, lat, lng) {
  _$jscoverage['socketsmanager.js'][119]++;
  var self = this;
  _$jscoverage['socketsmanager.js'][120]++;
  var twitterSearcher = new TwitterSearcher();
  _$jscoverage['socketsmanager.js'][122]++;
  twitterSearcher.on("tweets", (function (tweets) {
  _$jscoverage['socketsmanager.js'][123]++;
  socket.emit("previousTweetsFound", tweets);
}));
  _$jscoverage['socketsmanager.js'][125]++;
  twitterSearcher.searchByLocation(lat, lng);
  _$jscoverage['socketsmanager.js'][126]++;
  twitterSearcher.searchByName(placeName);
});
_$jscoverage['socketsmanager.js'][130]++;
SocketsManager.prototype.startTwitterStream = (function (placeName, socket, lat, lng) {
  _$jscoverage['socketsmanager.js'][132]++;
  var twitterFeeder = new TwitterFeeder(this.app.twitterNode);
  _$jscoverage['socketsmanager.js'][133]++;
  this.addClient(twitterFeeder, socket);
  _$jscoverage['socketsmanager.js'][135]++;
  twitterFeeder.on("tweet", (function (tweet) {
  _$jscoverage['socketsmanager.js'][136]++;
  socket.send(tweet);
}));
  _$jscoverage['socketsmanager.js'][138]++;
  twitterFeeder.searchByName(placeName, lat, lng);
});
_$jscoverage['socketsmanager.js'][141]++;
SocketsManager.prototype.addClient = (function (feeder, socket) {
  _$jscoverage['socketsmanager.js'][142]++;
  this.clients[socket.id] = feeder;
});
_$jscoverage['socketsmanager.js'][146]++;
module.exports.createWithAppReference = (function (app) {
  _$jscoverage['socketsmanager.js'][147]++;
  var socketManager = new SocketsManager(app);
  _$jscoverage['socketsmanager.js'][148]++;
  return socketManager;
});
_$jscoverage['socketsmanager.js'].source = ["var GeoNames = require('./geonames'),","\tTwitterFeeder = require('./twitterfeeder'),","\tTwitterSearcher = require('./twittersearcher'),","\tCommon = require('./common'),","\tTools = Common.tools;","\t","\t","","var SocketsManager = function(app) {","\tthis.app = app;","\tthis.io = require('socket.io').listen(app);\t","\tvar onConnection = Tools.bind(this.onConnection, this);","\tthis.io.sockets.on('connection', onConnection);\t","\tthis.clients = {}; //connected clients","\t","};","","","SocketsManager.prototype.onConnection = function(socket) { //Para cada conexi&#195;&#179;n\t\t","\tvar self = this;","\tsocket.on('place', function (place) {","\t\t\tself.checkPlace(place.name, socket);","\t   ","\t});","\t","\tsocket.on('want_another_place', function(whichPlace) {","\t\t","\t\tvar placeIndex = whichPlace.placeIndex;","\t\tsocket.get('placeResults', function (err, places) {","\t\t    if (err){","\t\t\t\tconsole.log('Error retreiving places from socket ', name);","\t\t\t}  ","\t\t\t","\t\t\t//acabar el stream anterior que tiene la ciudad antigua","\t\t\tvar feeder = self.clients[socket.id];\t\t","\t\t\tif(feeder) {","\t\t\t\tfeeder.endStream();","\t\t\t}","\t\t\t","\t\t\t","\t\t\t//mejorar esto por dios!","\t\t\tvar reorderedResults = [];","\t\t\treorderedResults[0] = places[placeIndex];\t\t","\t\t\tfor(var i in places){","\t\t\t\tif(i != placeIndex){","\t\t\t\t\treorderedResults.push(places[i]);\t","\t\t\t\t}\t\t","\t\t\t}","","\t\t\tsocket.emit('placeCheckedInGeoNames', reorderedResults);","\t\t\tvar mainResult =  reorderedResults[0];","\t\t\tnew GeoNames()","\t\t\t.on('weatherStationsFound', function(stations) {","\t\t\t\tsocket.emit('weatherStationsFound', stations);","\t\t\t})","","\t\t\t.on('weatherStationsNotFound', function() {","\t\t\t\tsocket.emit('weatherStationsNotFound');","\t\t\t})","\t\t\t.searchWeatherStations(mainResult.lat, mainResult.lng);","\t\t\tself.searchTwitter(mainResult.name, socket , mainResult.lat, mainResult.lng);","\t\t\tself.startTwitterStream(mainResult.name, socket, mainResult.lat, mainResult.lng);","\t\t\t","\t\t});","\t\t","\t\t","\t\t","\t\t","\t});","\t","\tsocket.on('disconnect', function() {","\t\tconsole.log('client disconnecting : ' + socket.id);","\t\tvar feeder = self.clients[socket.id];\t\t","\t\tif(feeder) {","\t\t\tfeeder.endStream();","\t\t}","\t\telse{","\t\t\tconsole.log('could not remove feeder listener from client ' + socket.id);","\t\t}","\t\t","\t});","};","","","SocketsManager.prototype.checkPlace = function(placeName, socket){\t","\tvar geoNames = new GeoNames();","\t","\tvar self = this;","\t","\tgeoNames","\t","\t.on('placesFound', function(places) {","\t\tsocket.set('placeResults', places);","\t\tsocket.emit('placeCheckedInGeoNames', places);","\t\tvar mainResult =  places[0];","\t\tgeoNames.searchWeatherStations(mainResult.lat, mainResult.lng);","\t\tself.searchTwitter(mainResult.name, socket , mainResult.lat, mainResult.lng);","\t\tself.startTwitterStream(mainResult.name, socket, mainResult.lat, mainResult.lng);","\t\t","\t})","\t\t\t","\t.on('placeNotFound', function() {","\t\tsocket.emit('placeNotFoundInGeoNames');","\t})\t","\t","\t.on('weatherStationsFound', function(stations) {","\t\tsocket.emit('weatherStationsFound', stations);","\t})","\t","\t.on('weatherStationsNotFound', function() {","\t\tsocket.emit('weatherStationsNotFound');","\t})","\t","\t.search(placeName);","}","","","SocketsManager.prototype.searchTwitter = function(placeName, socket, lat, lng){\t\t","\tvar self = this;","\tvar twitterSearcher = new TwitterSearcher();","\t","\ttwitterSearcher.on(\"tweets\", function(tweets){","        socket.emit('previousTweetsFound', tweets);","\t});","\ttwitterSearcher.searchByLocation(lat, lng);","\ttwitterSearcher.searchByName(placeName);\t   ","}","","","SocketsManager.prototype.startTwitterStream = function(placeName, socket, lat, lng){\t","","\tvar twitterFeeder = new TwitterFeeder(this.app.twitterNode);","\tthis.addClient(twitterFeeder, socket);","\t\t","\ttwitterFeeder.on(\"tweet\", function(tweet){","        socket.send(tweet);","\t});\t\t","\ttwitterFeeder.searchByName(placeName, lat, lng);","};","","SocketsManager.prototype.addClient = function(feeder, socket){","\tthis.clients[socket.id] = feeder;\t","};","","","module.exports.createWithAppReference =  function(app) {","\tvar socketManager = new  SocketsManager(app);","\treturn socketManager;","};"];
